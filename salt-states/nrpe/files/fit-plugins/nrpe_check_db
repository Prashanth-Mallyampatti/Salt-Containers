#!/bin/ksh
#
# check Database with nrpe- client- demon
#
#  Call: /ugb/nrpe_check_db -s SID [-t <DB-TYPE>] [ -o cssc|icinga]
#
#  Output: BS / LOG
#
#  responsible: B. Doser
#
# Parameter:
#   -s SID      : SAP- System ID
#   -t DB-TYPE: : supported DB- Types: oracle | db2 | db2_SH | sapdb | sybase | hana
#                 if DB-Type is not passed, scan- Tool is used to figure out the DB- TYPE. If scan_sap* Tool does not exist, then this Parameter is required or ==> Err RC=100 occurs
#   -o          : decide, which kind of MSG you want to have: cssc -Format with Human readable Output or icinga for Icinga Readable Output. Default: icinga
#
# exit- Codes Icinga:
#  0 : All OK
#  1 : Warning
#  2 : Error
#  3 : unknown
# exit- Codes CSSC: 
#    1 : Any Error
#    2 : SYBASE- PW- File does not exist.
#   10 : missing scan_sap_configs- Tool or missing X- Perm on scan_sap_configs- Tool
#   11 : SID not found on this Node
#   12 : unsupported DB- TYPE
#   80 : Error with saphostctrl
#  100 : scan- Tool is missing and DB-TYPE is not passed.
#  101 : DB Select failed, DB- Output not found
#  123 : something is not supported.
#  124 : something unexpected happened
#  143 : Timeout
#

# Test:
# dsh "NODENAME=\`hostname\`;ALL_SID=\`scan_sap_configs SID KNOTEN=\$NODENAME SERVER=DB|awk '{ print \$1 }'\`;for i in \$ALL_SID;do CMD=\"ic_check_db -s \$i -o cssc\";echo \"CMD=\$CMD;\";eval \$CMD;done"

##project## yes=supported, todo=planned, NA=not applicable, not=not allowed, test=test, ?=unknown
# project     Responsible   : itdose
# project     Level         : 4
# project     CLASS         : ALARMING MONITORING
# project     Script        : ksh
# project OS  AIX52         : yes
# project OS  AIX61         : yes
# project OS  AIX71         : yes
# project OS  SLES8         : yes
# project OS  SLES9         : yes
# project OS  SLES10        : yes
# project OS  SLES11        : yes
# project OS  SLES11SP2     : yes
# project OS  SLES12        : yes
# project OS  HP-UX         : todo
# project     nSID          : yes
# project     DC two-digit  : yes
# project     wcoll extern  : yes
# project     NetApp        : NA
# project     no ssh cw     : yes
# project     no r-commands : yes
# project     node.cfg      : yes
# project DB  ORACLE        : yes
# project DB  DB2           : yes
# project DB  SAPDB         : yes
# project DB  SYBASE        : yes
# project LOC Germany       : yes
# project LOC USA           : todo
# project LOC China         : todo
# project LOC Canada        : todo

# project     !root         : yes

# 03Feb2017_BD: Start script
#
#----------------------------------------------------------------------------
print_output()
{
                 if [ $DEBUG -ne 0 ];then echo "${SPACE}print_output(): Beginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "

  MSG="$1"
  shift
  MSG_TYPE=$2
  shift
				if [ $DEBUG -ne 0 ];then echo "${SPACE}MSG_TYPE=$MSG_TYPE; MSG=$MSG;" >> $DEBUGFILE;fi

  while [ $# -gt 0 ]
  do
                if [ $DEBUG -ne 0 ];then echo "${SPACE}\$1=$1;" >> $DEBUGFILE;fi
    case $1 in
      MONITOR)                  if [ $DEBUG -ne 0 ];then echo "${SPACE}SCREENOUTPUT@ $MSG" >> $DEBUGFILE;fi
                       case $MSG_TYPE in
                         Error) echo "$MSG" >&2  ;;
                         *)     echo "$MSG"      ;;
                       esac
                       ;;
      LOG)             echo "$MSG"                      >> $LOG                                                 ;;
      DEBUG)           echo "${SPACE}$MSG"              >> $DEBUGFILE                                           ;;
      HISTORY)         echo "$MSG"                      >> $HISTORYFILE                                         ;;
      OUTPUT)          echo "$MSG"                      >> $OUTPUT_FILE                                         ;;
    esac
    shift
  done #...von while [ $# -gt 0 ]

  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
                 if [ $DEBUG -ne 0 ];then echo "${SPACE}print_output(): Ende" >> $DEBUGFILE;fi
}       #...von print_output()
#----------------------------------------------------------------------------
Plattformerweiterung()
{
                if [ $DEBUG -ne 0 ];then echo "${SPACE}Plattformerweiterung(): }eginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "
#
# Def. Linuxportierung
#
# echo $E "erste zeile\nzweite zeile"
# echo $N "line ohne carriage-return: $C"
#
  case `echo -e` in -e) E='';; *) E='-e';; esac
  case `echo -n` in -n) N=''; C='\c';; *) N='-n'; C='';; esac

  PLATTFORM=`uname`

  case $PLATTFORM in
    AIX)   OSLEVEL=`oslevel`
           TIMEOUT_FEATURE=""
           TIMEOUT=/usr/global/bin/timeout	#	timeout 20    "ls  >/dev/null 2>&1" >/dev/null 2>&1
           [ -d /usr/tivoli/tsm/client/ba/bin64 ] && TSM_PATH=/usr/tivoli/tsm/client/ba/bin64 || TSM_PATH=/usr/tivoli/tsm/client/ba/bin
           PING="ping -c 1"             #        >/dev/null 2>&1
           PINGPOST=""
           FILESYSTEMS=/etc/filesystems
           ;;
    Linux) # da in crontab jobs "PATH=/usr/bin:/bin" ist
           echo $PATH | grep /usr/local/bin     > /dev/null   ||   PATH=$PATH:/usr/local/bin
           echo $PATH | grep /usr/global/bin    > /dev/null   ||   PATH=$PATH:/usr/global/bin
           OSLEVEL=`oslevel -d |cut -d_ -f1`
           case $OSLEVEL in
             SLES8|SLES9) TIMEOUT_FEATURE="--" ;;
             *)           TIMEOUT_FEATURE=""   ;;
           esac
           TIMEOUT=timeout	#	timeout 20    "ls  >/dev/null 2>&1" >/dev/null 2>&1
           [ -d /opt/tivoli/tsm/client/ba/bin64 ] && TSM_PATH=/opt/tivoli/tsm/client/ba/bin64 || TSM_PATH=/opt/tivoli/tsm/client/ba/bin
           PING="ping -c 1 -w 2"	#        >/dev/null 2>&1
           PINGPOST=""
           FILESYSTEMS=/etc/fstab
           ;;
  HP-UX) 
           echo $PATH | grep /usr/local/bin       > /dev/null ||   PATH=$PATH:/usr/local/bin
           echo $PATH | grep /usr/global_hpux/bin > /dev/null ||   PATH=$PATH:/usr/global_hpux/bin
           echo $PATH | grep /usr/global/bin      > /dev/null ||   PATH=$PATH:/usr/global/bin
           # to enable -o in ps
           export UNIX95=1
           PING="ping -c 1"	#        >/dev/null 2>&1
           PINGPOST="-n 2"
           FILESYSTEMS=/etc/fstab
           [ -d /opt/tivoli/tsm/client/ba/bin64 ] && TSM_PATH=/opt/tivoli/tsm/client/ba/bin64 || TSM_PATH=/opt/tivoli/tsm/client/ba/bin
           ;;
    *)     MSG="E: $SID; $NODENAME: Plattform ($PLATTFORM) not supported"
           print_output "$MSG" "Error" $MONITOR LOG $DEBUGINFO 
           prg_ende 1
  esac

                if [ $DEBUG -ne 0 ];then echo "${SPACE}Es handelt sich um eine $PLATTFORM Plattform" >> $DEBUGFILE;fi
  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
                 if [ $DEBUG -ne 0 ];then echo "${SPACE}Plattformerweiterung(): `date`" >> $DEBUGFILE;fi
}       #...von Plattformerweiterung()
#----------------------------------------------------------------------------
get_standort()
{
                if [ $DEBUG -ne 0 ];then echo "${SPACE}get_standort(): Beginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "
    # ------------------------------------------------
    # This Proc is to define Location- Specific Values
    # ------------------------------------------------
    #
  is_cloud >/dev/null && CLOUD_ENV=YES || CLOUD_ENV=NO
		if [ $DEBUG -ne 0 ];then echo "${SPACE}CLOUD_ENV=$CLOUD_ENV;" >> $DEBUGFILE;fi
  if [ "$CLOUD_ENV" = "YES" ]
  then
    STANDORT=WHM
  else
    DATACENTER=`scan_node_configs DATACENTER 2>/dev/null`			# e.g.: 01 09

    case $DATACENTER in
      DE)          STANDORT=ext
                   ;;
      01|02|03)    STANDORT=WHM
                   ;;
      05|06|07)    STANDORT=CS
                   ;;
      08|09|10|17) STANDORT=ND
                   ;;
      11|12|13|18) STANDORT=CA
                   ;;
      14|15|16)    STANDORT=MEX
                   ;;
      *)           MSG="E: $SID; $NODENAME: Unknown DATACENTER: DATACENTER=$DATACENTER; NODENAME=$NODENAME;"
                   print_output "$MSG" "Error" $MONITOR LOG $DEBUGINFO
                   prg_ende 1
                   ;;
    esac  #...von case $DATACENTER in
  fi

                if [ $DEBUG -ne 0 ];then echo "${SPACE}STANDORT=$STANDORT;" >> $DEBUGFILE;fi
  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
                if [ $DEBUG -ne 0 ];then echo "${SPACE}get_standort(): Ende" >> $DEBUGFILE;fi
}       #...von get_standort
#----------------------------------------------------------------------------
prg_ende()
{
		if [ $DEBUG -ne 0 ];then echo "${SPACE}prg_ende(): Beginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "
  RC=$1
  rm $SQLFILE $TMPFILE 2>/dev/null
  MSG="I: $SID: Prg ended with RC=$RC;"
  print_output "$MSG" "Info" LOG $DEBUGINFO

  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
                if [ $DEBUG -ne 0 ];then echo "${SPACE}prg_ende(): Ende" >> $DEBUGFILE;fi
  exit $RC
}	#...von prg_ende()
#----------------------------------------------------------------------------
get_sid_info()
{
		if [ $DEBUG -ne 0 ];then echo "${SPACE}get_sid_info(): Beginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "
  sid=`echo $SID |tr "[:upper:]" "[:lower:]"`

  if [ "$DB_TYPE_PARA" = "UNDEF" ]
  then
    if [ -x $SCAN_SAP_CONFIGS ]
    then
      DB_TYPE_PARA=`$SCAN_SAP_CONFIGS SID=$SID KNOTEN=$NODENAME SERVER=DB,SH DB |tail -1 |awk '{ print $NF }' |tr "[:lower:]" "[:upper:]"`
		if [ $DEBUG -ne 0 ];then echo "${SPACE}$SCAN_SAP_CONFIGS SID=$SID KNOTEN=$NODENAME SERVER=DB,SH DB"		>> $DEBUGFILE
                                         $SCAN_SAP_CONFIGS |grep $NODENAME |sed "s@^@${SPACE}## $SCAN_SAP_CONFIGS ## @g" 	>> $DEBUGFILE
                fi
    else
      DB_TYPE_PARA=ERROR
    fi
  fi
		if [ $DEBUG -ne 0 ];then echo "${SPACE}DB_TYPE_PARA=$DB_TYPE_PARA; RC_FINAL_CSSC=$RC_FINAL_CSSC; RC_FINAL_IC=$RC_FINAL_IC;" >> $DEBUGFILE;fi

  case $DB_TYPE_PARA in 
    DB2*)    [ -x $SCAN_SAP_CONFIGS ] && $SCAN_SAP_CONFIGS SID=$SID KNOTEN=$NODENAME SERVER=SH |grep -q ^ && DB_TYPE_PARA="db2_SH"
             SIDADM=${sid}adm  ; DBADM=db2${sid} ; DB_TYPE_SHORT=db2  ;;
    ORACLE*) SIDADM=${sid}adm  ; DBADM=ora${sid} ; DB_TYPE_SHORT=ora  ;;
    HANA*)   SIDADM=${sid}adm  ; DBADM=hdb${sid} ; DB_TYPE_SHORT=hdb  ;;
    SAPDB*)  SIDADM=${sid}adm  ; DBADM=sqd${sid} ; DB_TYPE_SHORT=ata  ;;
    SYBASE*) SIDADM=${sid}adm  ; DBADM=syb${sid} ; DB_TYPE_SHORT=syb  ;;
    ERROR)   MSG="E: $SID:$SCAN_SAP_CONFIGS does not exist or does not have x- Perms. So, you must enter the DB-TYPE- Parameter"
#             case $OUTPUT_FORMAT in
#               CSSC)   print_output "$MSG" "Error" $MONITOR LOG $DEBUGINFO ;;
#               ICINGA) print_output "$MSG" "Error"          LOG $DEBUGINFO ;;
#             esac
             print_output "$MSG" "Error" $MONITOR LOG $DEBUGINFO 
             [ $RC_FINAL_CSSC -eq 0 ] && RC_FINAL_CSSC=10
             [ $RC_FINAL_IC   -eq 0 ] && RC_FINAL_IC=3
             ;;
    "")      MSG="E: SID=$SID; does not exist on NODENAME=$NODENAME"
             print_output "$MSG" "Error" $MONITOR LOG $DEBUGINFO 
             [ $RC_FINAL_CSSC -eq 0 ] && RC_FINAL_CSSC=11
             [ $RC_FINAL_IC   -eq 0 ] && RC_FINAL_IC=3
             ;;
    *)       MSG="E: $SID: unsupported DB_TYPE=$DB_TYPE_PARA; Abort"
             print_output "$MSG" "Error" $MONITOR LOG $DEBUGINFO 
             [ $RC_FINAL_CSSC -eq 0 ] && RC_FINAL_CSSC=12
             [ $RC_FINAL_IC   -eq 0 ] && RC_FINAL_IC=3
             ;;
  esac

		if [ $DEBUG -ne 0 ];then echo "${SPACE}SID=$SID; sid=$sid; DB_TYPE_PARA=$DB_TYPE_PARA; DB_TYPE_SHORT=$DB_TYPE_SHORT; DBADM=$DBADM; RC_FINAL_CSSC=$RC_FINAL_CSSC; RC_FINAL_IC=$RC_FINAL_IC;" >> $DEBUGFILE;fi
  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
		if [ $DEBUG -ne 0 ];then echo "${SPACE}get_sid_info(): Ende" >> $DEBUGFILE;fi

  case $OUTPUT_FORMAT in
    CSSC)   [ $RC_FINAL_CSSC -ne 0 ] && prg_ende $RC_FINAL_CSSC   ;;
    ICINGA) [ $RC_FINAL_IC   -ne 0 ] && prg_ende $RC_FINAL_IC     ;;
  esac

}	#...von get_sid_info()
#----------------------------------------------------------------------------
check_saphostctrl()
{
 		if [ $DEBUG -ne 0 ];then echo "${SPACE}check_saphostctrl(): Beginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "
  if [ -x $SAPHOSTCTRL ]
  then
    CMD="$SAPHOSTCTRL -function GetDatabaseStatus -dbname $SID -dbtype $DB_TYPE_SHORT"
		if [ $DEBUG -ne 0 ];then echo "${SPACE}CMD=$CMD;" >> $DEBUGFILE;fi

    $TIMEOUT $TIMEOUT_SEC $TIMEOUTFEATURE su - $SIDADM -c "$SAPHOSTCTRL -function GetDatabaseStatus -dbname $SID -dbtype $DB_TYPE_SHORT" > $TMPFILE 2>&1
    RC=$?
		if [ $DEBUG -ne 0 ];then echo "${SPACE}RC($SAPHOSTCTRL)=$RC; RC_FINAL_CSSC=$RC_FINAL_CSSC; RC_FINAL_IC=$RC_FINAL_IC; (1)"		>> $DEBUGFILE
                                         sed "s@^@${SPACE}## $CMD ## @g" $TMPFILE 				>> $DEBUGFILE
                fi
  else
    MSG="E: $SAPHOSTCTRL does not exist or does not have X- Perms"
    print_output "$MSG" "Error" $MONITOR LOG $DEBUGINFO
    RC=81
  fi

  case $RC in
    0)   [ $RC_FINAL_CSSC -eq 0 ] && RC_FINAL_CSSC=$RC    ; [ $RC_FINAL_IC -eq 0 ] && RC_FINAL_IC=0     ;;
    81)  [ $RC_FINAL_CSSC -eq 0 ] && RC_FINAL_CSSC=$RC    ; [ $RC_FINAL_IC -eq 0 ] && RC_FINAL_IC=1     ;;
    137) [ $RC_FINAL_CSSC -eq 0 ] && RC_FINAL_CSSC=$RC    ; [ $RC_FINAL_IC -eq 0 ] && RC_FINAL_IC=1     ;;
    143) [ $RC_FINAL_CSSC -eq 0 ] && RC_FINAL_CSSC=$RC    ; [ $RC_FINAL_IC -eq 0 ] && RC_FINAL_IC=1     ;;
    *)   [ $RC_FINAL_CSSC -eq 0 ] && RC_FINAL_CSSC=80     ; [ $RC_FINAL_IC -eq 0 ] && RC_FINAL_IC=3     ;;
  esac
		if [ $DEBUG -ne 0 ];then echo "${SPACE}RC_FINAL_CSSC=$RC_FINAL_CSSC; RC_FINAL_IC=$RC_FINAL_IC; (2)" >> $DEBUGFILE;fi
  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
 		if [ $DEBUG -ne 0 ];then echo "${SPACE}check_saphostctrl(): Ende" >> $DEBUGFILE;fi
  case $OUTPUT_FORMAT in
    CSSC)   return $RC_FINAL_CSSC ;;
    ICINGA) return $RC_FINAL_IC   ;;
  esac
}	#...von check_saphostctrl()
#----------------------------------------------------------------------------
check_db_cmds()
{
		if [ $DEBUG -ne 0 ];then echo "${SPACE}check_db_cmds(): Beginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "
  RC=0
  case $DB_TYPE_PARA in
    ORACLE*)  #
              ## TMP oracle : /tmp/ic_check_db.34472268 ## 
              ## TMP oracle : /tmp/ic_check_db.34472268 ## 
              ## TMP oracle : /tmp/ic_check_db.34472268 ## 1 row selected.
              ## TMP oracle : /tmp/ic_check_db.34472268 ## 
              #
              echo "connect / as sysdba"                                    > $SQLFILE
              echo "set feedback on"                                       >> $SQLFILE
              echo "select * from V\$VERSION where BANNER like 'Oracle%';" >> $SQLFILE
              echo "quit"                                                  >> $SQLFILE
              DB_CMD="sqlplus /nolog"
			if [ $DEBUG -ne 0 ];then echo "${SPACE}su - $DBADM -c \"$DB_CMD\"" >> $DEBUGFILE;fi
              $TIMEOUT $TIMEOUT_SEC $TIMEOUTFEATURE su - $DBADM -c "$DB_CMD" < $SQLFILE > $TMPFILE 2>&1
              RC=$?	# 143
			if [ $DEBUG -ne 0 ];then echo "${SPACE}RC($DB_CMD)=$RC;" 				>> $DEBUGFILE;fi
              [ $RC -eq 0 ] && grep -q "1 row selected" $TMPFILE && RC=0 || RC=101
              ;;
    DB2_SH)   #
              ## TMP db2_SH : /tmp/ic_check_db.42205196 ##
              ## TMP db2_SH : /tmp/ic_check_db.42205196 ## Instance  : db2bp2
              ## TMP db2_SH : /tmp/ic_check_db.42205196 ## DB2 State : Available
              #
              DB_CMD="db2gcf -i db2${sid} -s"
			if [ $DEBUG -ne 0 ];then echo "${SPACE}su - $DBADM -c \"$DB_CMD\"" >> $DEBUGFILE;fi
              $TIMEOUT $TIMEOUT_SEC $TIMEOUTFEATURE su - $DBADM -c "$DB_CMD" < /dev/null > $TMPFILE 2>&1
              RC=$?	# 143
			if [ $DEBUG -ne 0 ];then echo "${SPACE}RC($DB_CMD)=$RC;" 					>> $DEBUGFILE;fi
              ANZ=`grep -c "DB2 State : Available" $TMPFILE`
              is_integer -q $ANZ || ANZ=999
              [ $RC -eq 0 ] && [ $ANZ -eq 1 ] && RC=0 || RC=101
              ;;
    DB2*)     #
              ## TMP db2 : /tmp/ic_check_db.31654232 ## 
              ## TMP db2 : /tmp/ic_check_db.31654232 ##   1 record(s) selected.
              ## TMP db2 : /tmp/ic_check_db.31654232 ## 
              ## TMP db2 : /tmp/ic_check_db.31654232 ## db2 => DB20000I  The QUIT command completed successfully.
              #
              echo "connect to $SID"                        > $SQLFILE
              echo "select * from sysibmadm.env_inst_info" >> $SQLFILE
              echo "quit"                                  >> $SQLFILE
              DB_CMD="db2"
			if [ $DEBUG -ne 0 ];then echo "${SPACE}su - $DBADM -c \"$DB_CMD\"" >> $DEBUGFILE;fi
              $TIMEOUT -s KILL $TIMEOUT_SEC $TIMEOUTFEATURE su - $DBADM -c "$DB_CMD" < $SQLFILE > $TMPFILE 2>&1
              RC=$?	# 143 137
                        if [ $DEBUG -ne 0 ];then echo "${SPACE}RC($DB_CMD)=$RC;"                               	>> $DEBUGFILE;fi
              ANZ=`grep -c "1 record.* selected" $TMPFILE`
              is_integer -q $ANZ || ANZ=999
              [ $RC -eq 0 ] && [ $ANZ -eq 1 ] && RC=0 || RC=101
              ;;
    HANA*)    RC=123
                        if [ $DEBUG -ne 0 ];then echo "${SPACE}RC(HANA)=$RC;"                                    	>> $DEBUGFILE
                                                 sed "s@^@${SPACE}## HANA: unsupported ## @g" $TMPFILE           	>> $DEBUGFILE 2>&1
                        fi
              ;;
    SAPDB*)   #
              ## TMP sapdb : /tmp/ic_check_db.9769 ## OK
              ## TMP sapdb : /tmp/ic_check_db.9769 ## State
              ## TMP sapdb : /tmp/ic_check_db.9769 ## ONLINE
              #
              DB_CMD="/sapdb/programs/bin/dbmcli -U c db_state"
			if [ $DEBUG -ne 0 ];then echo "${SPACE}su - $DBADM -c \"$DB_CMD\"" >> $DEBUGFILE;fi
              $TIMEOUT $TIMEOUT_SEC $TIMEOUTFEATURE su - $DBADM -c "$DB_CMD" > $TMPFILE 2>&1
              RC=$?     # 143
                        if [ $DEBUG -ne 0 ];then echo "${SPACE}RC($DB_CMD)=$RC;"                                       >> $DEBUGFILE;fi
              ANZ=`grep -cE "ONLINE|WARM" $TMPFILE`
              is_integer -q $ANZ || ANZ=999
              [ $RC -eq 0 ] && [ $ANZ -eq 1 ] && RC=0 || RC=101
              ;;
    SYBASE*)  # 
              ## TMP sybase : /tmp/ic_check_db.9769 ##  Adaptive Server Enterprise/15.7/EBF 21708 SMP SP110 /P/x86_64/Enterprise Linux/
              ## TMP sybase : /tmp/ic_check_db.9769 ##          ase157sp11x/3546/64-bit/FBO/Fri Nov  8 05:39:38 2013 
              ## TMP sybase : /tmp/ic_check_db.9769 ## 
              ## TMP sybase : /tmp/ic_check_db.9769 ## (1 row affected)
              #
              PW=`cat /usr/local/config/sybase_$SID.pw 2>/dev/null`
              if [ "$PW" = "" ]
              then 
                RC=2
              else
                echo "SELECT @@VERSION"  > $SQLFILE
                echo "go"               >> $SQLFILE

                DB_CMD="isql -Usapsa -S$SID -D$SID -i $SQLFILE -o $TMPFILE -X"
			if [ $DEBUG -ne 0 ];then echo "${SPACE}su - $DBADM -c \"$DB_CMD\"" >> $DEBUGFILE;fi
                echo $PW | $TIMEOUT $TIMEOUT_SEC $TIMEOUTFEATURE su - $DBADM -c "$DB_CMD" </dev/zero >/dev/null 2>&1
                        if [ $DEBUG -ne 0 ];then echo "${SPACE}RC($DB_CMD)=$RC;"                                       	>> $DEBUGFILE;fi
                ANZ=`grep -cE "Adaptive Server Enterprise" $TMPFILE`
                is_integer -q $ANZ || ANZ=999
                [ $RC -eq 0 ] && [ $ANZ -eq 1 ] && RC=0 || RC=101
              fi
              ;;
    MYSQL*)   case $NODENAME in
                odtxhp04) MYSQL_USER="" ;;
                odtxhp05) MYSQL_USER="" ;;
                *)        MYSQL_USER="-u fitmonitor" ;;
              esac

              DB_CMD="mysql $SID $MYSQL_USER -e status"
			if [ $DEBUG -ne 0 ];then echo "${SPACE}su - $DBADM -c \"$DB_CMD\"" >> $DEBUGFILE;fi
              $TIMEOUT $TIMEOUT_SEC $TIMEOUTFEATURE $DB_CMD > $TMPFILE 2>&1
                        if [ $DEBUG -ne 0 ];then echo "${SPACE}RC($DB_CMD)=$RC;"                                        >> $DEBUGFILE;fi
              ANZ=`grep -cE "^Threads" $TMPFILE`
              is_integer -q $ANZ || ANZ=999
              [ $RC -eq 0 ] && [ $ANZ -eq 1 ] && RC=0 || RC=101
              ;;
    *)        MSG="E: $SID: ?? This should never happen ??"
              print_output "$MSG" "Error" $MONITOR LOG $DEBUGINFO
              RC=124
              ;;
  esac 		#...von case $DB_TYPE_PARA in
		if [ $DEBUG -ne 0 ];then echo "${SPACE}DB_TYPE_PARA=$DB_TYPE_PARA; ANZ=$ANZ; RC=$RC;" 	>> $DEBUGFILE
                                         sed "s@^@${SPACE}## SQL $DB_TYPE_PARA : $SQLFILE ## @g" $SQLFILE 	>> $DEBUGFILE 2>&1
                                         echo "${SPACE}#---- EOF $SQLFILE ----"					>> $DEBUGFILE
                                         sed "s@^@${SPACE}## TMP $DB_TYPE_PARA : $TMPFILE ## @g" $TMPFILE 	>> $DEBUGFILE 2>&1
                                         echo "${SPACE}#---- EOF $TMPFILE ----"					>> $DEBUGFILE

                fi
		if [ $DEBUG -ne 0 ];then echo "${SPACE}RC_FINAL_CSSC=$RC_FINAL_CSSC; RC_FINAL_IC=$RC_FINAL_IC; (1)" >> $DEBUGFILE;fi

  [ $RC_FINAL_CSSC -eq 0 ]   && RC_FINAL_CSSC=$RC
  [ $RC_FINAL_IC   -lt $RC ] && RC_FINAL_IC=$RC		# if saphostctrl fails, then Warning, but if additionally DB- Connect is failing, then it has to be an Error (A.Dauer, 08Feb2017)

		if [ $DEBUG -ne 0 ];then echo "${SPACE}RC_FINAL_CSSC=$RC_FINAL_CSSC; RC_FINAL_IC=$RC_FINAL_IC; (2)" >> $DEBUGFILE;fi
  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
		if [ $DEBUG -ne 0 ];then echo "${SPACE}check_db_cmds(): Ende" >> $DEBUGFILE;fi
  
  case $OUTPUT_FORMAT in
    CSSC)   return $RC_FINAL_CSSC ;;
    ICINGA) return $RC_FINAL_IC   ;;
  esac

}	#...von check_db_cmds()
#----------------------------------------------------------------------------
set_messages_and_printout_CSSC()
{
		if [ $DEBUG -ne 0 ];then echo "${SPACE}set_messages_and_printout_CSSC(): Beginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "
# exit- Codes Icinga:
#  0 : All OK
#  1 : Warning
#  2 : Error
#  3 : unknown
# exit- Codes CSSC: 
#    1 : Any Error
#    2 : SYBASE- PW- File does not exist.
#   10 : missing scan_sap_configs- Tool or missing X- Perm on scan_sap_configs- Tool
#   11 : SID not found on this Node
#   12 : unsupported DB- TYPE
#   80 : Error with saphostctrl
#  100 : scan- Tool is missing and DB-TYPE is not passed.
#  101 : DB Select failed, DB- Output not found
#  123 : something is not supported.
#  124 : something unexpected happened
#
  case $RC_FINAL_CSSC in
    0)   MSG_ARRAY[1]="I: $SID: $BASENAME Alles ok"
         MSG_TYPE=Info
         ;;
    1)   MSG_ARRAY[1]="I: $SID: $BASENAME Any Error"
         MSG_TYPE=Error
         ;;
     80) MSG_ARRAY[1]="I: $SID: $BASENAME saphostctrl failed"
         MSG_TYPE=Error
         ;;
    101) MSG_ARRAY[1]="E: $SID: $BASENAME DB not ok"
         MSG_TYPE=Error
         ;;
    123) MSG_ARRAY[1]="W: $SID: $BASENAME HANA not supported"
         MSG_TYPE=Warning
         ;;
    124) MSG_ARRAY[1]="W: $SID: $BASENAME unexpected Error with the script"
         MSG_TYPE=Error
         ;;
    137) MSG_ARRAY[1]="W: $SID: $BASENAME Timeout (137)"
         MSG_TYPE=Error
         ;;
    143) MSG_ARRAY[1]="W: $SID: $BASENAME Timeout (143)"
         MSG_TYPE=Error
         ;;
    *)   MSG_ARRAY[1]="W: $SID: $BASENAME unknown RC=$RC;"
         MSG_TYPE=Error
         ;;
  esac

  ANZ_MSG_ARRAY=${#MSG_ARRAY[*]}
		if [ $DEBUG -ne 0 ];then echo "${SPACE}ANZ_MSG_ARRAY=$ANZ_MSG_ARRAY;" >> $DEBUGFILE;fi
  i=0
  for i in $ANZ_MSG_ARRAY
  do
    print_output "${MSG_ARRAY[$i]}" "MSG_TYPE" $MONITOR LOG $DEBUGINFO HISTORY
  done
  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
                if [ $DEBUG -ne 0 ];then echo "${SPACE}set_messages_and_printout_CSSC(): Ende" >> $DEBUGFILE;fi
}	#...von set_messages_and_printout_CSSC()
#----------------------------------------------------------------------------
set_messages_and_printout_IC()
{
		if [ $DEBUG -ne 0 ];then echo "${SPACE}set_messages_and_printout_IC(): Beginn" >> $DEBUGFILE;fi
  SPACE="${SPACE}  "
# exit- Codes Icinga:
#  0 : All OK
#  1 : Warning
#  2 : Error
#  3 : unknown
# exit- Codes CSSC: 
#    1 : Any Error
#    2 : SYBASE- PW- File does not exist.
#   10 : missing scan_sap_configs- Tool or missing X- Perm on scan_sap_configs- Tool
#   11 : SID not found on this Node
#   12 : unsupported DB- TYPE
#   80 : Error with saphostctrl
#  100 : scan- Tool is missing and DB-TYPE is not passed.
#  101 : DB Select failed, DB- Output not found
#  123 : something is not supported.
#  124 : something unexpected happened
#
  case $RC_FINAL_IC in
    0)   MSG_ARRAY[1]="OK: $SID"
         MSG_TYPE=INFO
         ;;
    1)   MSG_ARRAY[1]="WARNING: $SID"
         MSG_TYPE=WARNING
         ;;
    2)   MSG_ARRAY[1]="ERROR: $SID"
         MSG_TYPE=Error
         ;;
    3)   MSG_ARRAY[1]="UNKNOWN: $SID"
         MSG_TYPE=UNKNOWN
         ;;
    *)   MSG_ARRAY[1]="W: $SID: $BASENAME unknown RC=$RC;"    
         MSG_TYPE=Error
         ;;
  esac

  ANZ_MSG_ARRAY=${#MSG_ARRAY[*]}
		if [ $DEBUG -ne 0 ];then echo "${SPACE}ANZ_MSG_ARRAY=$ANZ_MSG_ARRAY;" >> $DEBUGFILE;fi
  i=0
  for i in $ANZ_MSG_ARRAY
  do
    print_output "${MSG_ARRAY[$i]}" "MSG_TYPE" $MONITOR LOG $DEBUGINFO HISTORY
  done
  SPACE="`echo "${SPACE}" |sed 's/^  \(.*\)$/\1/'`"
                if [ $DEBUG -ne 0 ];then echo "${SPACE}set_messages_and_printout_IC(): Ende" >> $DEBUGFILE;fi
}	#...von set_messages_and_printout_IC()
#--------------------------- MAIN -------------------------------------------
if [ $# -lt 2 ]
then
  sed -n "2,/^$/p" $0
  echo "E: Too few parameter"
  exit 1
fi

DEBUG=1 #   0 | 1
datum=`date +"%d.%m.%Y_%H:%M:%S"`
NODENAME=`hostname`
MYNAME="$0"
BASENAME=`basename $MYNAME`

LOGDIR=/usr/local/log/$BASENAME
mkdir $LOGDIR 2>/dev/null
chmod 1777 $LOGDIR 2>/dev/null

LOG=$LOGDIR/$BASENAME.log
DEBUGFILE=/tmp/$BASENAME.debug
HISTORYFILE=$LOGDIR/$BASENAME.history.log
OUTPUT_FILE=/tmp/$BASENAME.screen.out

[ $DEBUG -ne 0 ] && DEBUGINFO=DEBUG || DEBUGINFO=""
MONITOR=MONITOR

TMPFILE=/tmp/$BASENAME.$$
SQLFILE=/tmp/$BASENAME.sql.$$
>$TMPFILE
>$SQLFILE

SPACE=""

echo "#------- ${datum} $0 $* ----" >> $LOG
echo "#------- ${datum} $0 $* ----" >> $LOG
echo "#------- ${datum} $0 $* ----" >> $LOG
echo "#------- ${datum} $0 $* ----" >> $DEBUGFILE
echo "#------- ${datum} $0 $* ----" >> $DEBUGFILE
echo "#------- ${datum} $0 $* ----" >> $DEBUGFILE

chmod 777 $LOG $DEBUGFILE $HISTORYFILE $OUTPUT_FILE $TMPFILE $SQLFILE 2>/dev/null
chown nobody $LOG $DEBUGFILE $HISTORYFILE $OUTPUT_FILE $TMPFILE $SQLFILE 2>/dev/null

SID=undef
DB_TYPE_PARA=UNDEF
TIMEOUT_SEC=30
OUTPUT_FORMAT="ICINGA"
RC_FINAL_CSSC=0
RC_FINAL_IC=0

datum=`date +"%d.%m.%Y_%H:%M:%S"`
NODENAME=`hostname`

SAPHOSTCTRL="/usr/sap/hostctrl/exe/saphostctrl"
SCAN_SAP_CONFIGS="/usr/global/bin/scan_sap_configs"

while [ $# -gt 0 ]
do
  PARA=`echo $1 |tr "[:lower:]" "[:upper:]"`
  case $PARA in
    -S) SID=`echo $2 |tr "[:lower:]" "[:upper:]"`
        shift
        ;;
    -T) DB_TYPE_PARA=`echo $2 |tr "[:lower:]" "[:upper:]"`
        shift
        ;;
    -O) OUTPUT_FORMAT=`echo $2 |tr "[:lower:]" "[:upper:]"`
        shift
        case $OUTPUT_FORMAT in
          CSSC)   OUTPUT_FORMAT="CSSC"   ;;
          ICINGA) OUTPUT_FORMAT="ICINGA" ;;
          *)      MSG="W: OUTPUT_FORMAT=$OUTPUT_FORMAT; is not supported. Using OUTPUT_FORMAT=ICINGA"
                  print_output "$MSG" "Warning" $MONITOR LOG $DEBUGINFO
                  OUTPUT_FORMAT="ICINGA"
                  ;;
        esac
        ;;
    *)  sed -n "2,/^$/p" $0
        echo "E: Wrong Parameter: PARA=$1;"
        exit 1
        ;;
  esac
  shift
done #...von while [ $# -gt 0 ]
			if [ $DEBUG -ne 0 ];then echo "M: SID=$SID; DB_TYPE_PARA=$DB_TYPE_PARA; OUTPUT_FORMAT=$OUTPUT_FORMAT;" >> $DEBUGFILE;fi

Plattformerweiterung

get_standort

get_sid_info

check_saphostctrl

check_db_cmds

case $OUTPUT_FORMAT in
  CSSC)    set_messages_and_printout_CSSC
           prg_ende $RC_FINAL_CSSC
           ;;
  ICINGA)  set_messages_and_printout_IC
           prg_ende $RC_FINAL_IC
           ;;
esac


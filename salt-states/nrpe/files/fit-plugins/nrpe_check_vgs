#!/usr/bin/perl -w
#
# Stefan Sousa
# Description: checks if there are enough physical volumes for the extension of all volume groups, which don't have enough place for the expansion of the biggest filesystem
#

# Bibliotheken
use strict;
use warnings;

# Variablen
my @atmp;
my @atmp2;
my $stmp;
my %vgs;
my @warning;
my $disks;

# OS check
chomp(my $oslevel = `uname`);
if( $oslevel eq "AIX"){
    print "UNKNOWN - AIX is not supported.\n";
     exit 3;
}

# Infos holen
@atmp =`sudo vgs -o vg_name,vg_free --noheadings --units g --nosuffix --aligned --separator " "`;
@atmp2=`sudo lvs -o lv_name,vg_name,lv_size --noheading --nosuffix --units g | sort -n -k 3 -r`;

# Checken ob Variablen belegt sind
if( scalar @atmp == 0 || scalar @atmp2 == 0 ){
	print "UNKNOWN - Variables are empty. Check sudo rights of user nagios.";
	exit 3;
}

# VG Infos nutzen
foreach $stmp (@atmp) {
	my @line = split(' ', $stmp);
	$vgs{$line[0]}{'free'} = $line[1];
}

# LVs Infos nutzen
while( (my $key, my $value) = each %vgs) {
	my $end = 1;
	foreach my $tmp2 (@atmp2) {
		if( index($tmp2, $key) != -1 && $end){
			my @lv_line = split(' ', $tmp2);
			my $lvname = $lv_line[0];
			$vgs{$key}{$lvname} = $lv_line[2];
			$end = 0;
		}
	}
}

for my $tmp5 ( keys %vgs) {
	my $free = $vgs{$tmp5}{'free'};
		delete $vgs{$tmp5}{'free'};
		my $lv;
		my $teil;
	for $lv ( keys %{ $vgs{$tmp5} } ) {
		$teil = 0.1 * $vgs{$tmp5}{$lv};
		if($teil > $free){
				push @warning, $tmp5;
		}
	}
}

$disks =`sudo pvscan | grep -v VG | wc -l`;
$disks =~ s/\R//g;

my $warning = join(", ", @warning);
if(@warning > $disks){
	print "WARNING - There are not enough disks ($disks disks), so that all critical VGs ($warning) can't be extended. Critical means that the biggest FS of a VG can't be extended.\n";
	exit 1;
} else{
	if(@warning = 0){
			print "OK - All filesystems can be extended. Free disks are not needed. Available disks: $disks. \n";
	} else{
			print "OK - All filesystems can be extended. Available disks: $disks. \n";
	}
	exit 0;
}
